<div>
  <style>
    me {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      padding-bottom: 1em;
      padding-top: 1em;
    }

    me p {
      text-transform: uppercase;
    }
  </style>
  <p>{{ contest.name }} ends in</p>
  <div class="countdown"
       data-end-at="{{ contest.end_at|date:'c' }}"
       data-number-color="{{ school.logo.action_text_color }}"
       data-number-bg-color="{{ school.logo.action_color }}"
       data-colon-color="{{ school.logo.bg_text_color }}">
    <style>
      me {
        --number-color: transparent;
        --number-bg-color: transparent;
        --colon-color: transparent;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 24px;
        font-weight: 500;
        font-family: var(--font-mono);
        gap: 4px;
        height: 34px !important;
      }

      me span {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        width: 27px;
      }

      me span.number {
        /* Variables are set in script. */
        color: var(--number-color);
        background-color: var(--number-bg-color);
      }

      me span.colon {
        /* Variables are set in script. */
        color: var(--colon-color);
        background-color: transparent;
      }
    </style>
    <script>
        (function() {
            /**
             * Countdown to a deadline.
             * 
             * @param {HTMLElement} self element containing the countdown.
             * @returns {void}
             */
            function countdown(self) {
                // compute the deadline
                const deadline = new Date(self.dataset.endAt);
                const deadlineTime = deadline.getTime();

                // set the number and colon colors
                self.style.setProperty('--number-color', self.dataset.numberColor);
                self.style.setProperty('--number-bg-color', self.dataset.numberBgColor);
                self.style.setProperty('--colon-color', self.dataset.colonColor);

                // get the number elements
                const h0 = self.querySelector('[data-number=h0]');
                const h1 = self.querySelector('[data-number=h1]');
                const m0 = self.querySelector('[data-number=m0]');
                const m1 = self.querySelector('[data-number=m1]');
                const s0 = self.querySelector('[data-number=s0]');
                const s1 = self.querySelector('[data-number=s1]');
                const numbers = [h0, h1, m0, m1, s0, s1];

                /** Update the countdown. */
                function updateCountdown() {
                    const now = new Date().getTime();
                    const diff = deadlineTime - now;

                    if (diff <= 0) {
                        clearInterval(interval);
                        numbers.forEach(number => number.textContent = '0');
                        return;
                    }

                    const hours = Math.floor(diff / (1000 * 60 * 60));
                    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
                    const seconds = Math.floor((diff % (1000 * 60)) / 1000);

                    const h0digit = Math.floor(hours / 10);
                    const h1digit = hours % 10;
                    const m0digit = Math.floor(minutes / 10);
                    const m1digit = minutes % 10;
                    const s0digit = Math.floor(seconds / 10);
                    const s1digit = seconds % 10;

                    numbers[0].innerText = h0digit.toString();
                    numbers[1].innerText = h1digit.toString();
                    numbers[2].innerText = m0digit.toString();
                    numbers[3].innerText = m1digit.toString();
                    numbers[4].innerText = s0digit.toString();
                    numbers[5].innerText = s1digit.toString();
                }

                updateCountdown();
                const interval = setInterval(updateCountdown, 1000);
            }

            const self = me();
            onloadAdd(() => countdown(self));
        })();
    </script>
    <span class="number" data-number="h0">&nbsp;</span>
    <span class="number" data-number="h1">&nbsp;</span>
    <span class="colon">:</span>
    <span class="number" data-number="m0">&nbsp;</span>
    <span class="number" data-number="m1">&nbsp;</span>
    <span class="colon">:</span>
    <span class="number" data-number="s0">&nbsp;</span>
    <span class="number" data-number="s1">&nbsp;</span>
  </div>
</div>
